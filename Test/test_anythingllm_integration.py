"""
Teste de Integra√ß√£o AnythingLLM
==============================

Script para testar a integra√ß√£o com AnythingLLM e verificar
se o sistema RAG est√° funcionando corretamente.
"""

import sys
import time
from pathlib import Path

# Adicionar src ao path
sys.path.insert(0, str(Path(__file__).parent.parent / "src"))

from ai.anythingllm_client import AnythingLLMClient, RAGPassage
from ai.rag_service import RAGService, ObjectionEvent
from core.config import create_config


def test_anythingllm_connection():
    """Testar conex√£o com AnythingLLM."""
    print("üîç Testando conex√£o com AnythingLLM...")
    
    try:
        client = AnythingLLMClient()
        is_available = client.health_check()
        
        if is_available:
            print("‚úÖ AnythingLLM conectado com sucesso!")
            print(f"   Modelo padr√£o: {client.default_model}")
            return True
        else:
            print("‚ùå AnythingLLM n√£o est√° dispon√≠vel")
            print("   Verifique se est√° rodando em http://localhost:3001")
            return False
            
    except Exception as e:
        print(f"‚ùå Erro ao conectar: {e}")
        return False


def test_rag_service():
    """Testar servi√ßo RAG."""
    print("\nüîç Testando servi√ßo RAG...")
    
    try:
        config = create_config()
        rag_service = RAGService(config)
        
        print(f"‚úÖ RAG Service inicializado")
        print(f"   LLM dispon√≠vel: {rag_service.is_available}")
        print(f"   Passagens na base: {len(rag_service.knowledge_base)}")
        
        return rag_service
        
    except Exception as e:
        print(f"‚ùå Erro ao inicializar RAG Service: {e}")
        return None


def test_objection_processing(rag_service):
    """Testar processamento de obje√ß√µes."""
    print("\nüîç Testando processamento de obje√ß√µes...")
    
    test_cases = [
        {
            "text": "O pre√ßo est√° muito alto",
            "category": "preco",
            "expected": "preco"
        },
        {
            "text": "Preciso pensar sobre isso",
            "category": "timing", 
            "expected": "timing"
        },
        {
            "text": "Preciso falar com meu chefe",
            "category": "autoridade",
            "expected": "autoridade"
        },
        {
            "text": "N√£o vejo necessidade disso",
            "category": "necessidade",
            "expected": "necessidade"
        }
    ]
    
    for i, test_case in enumerate(test_cases, 1):
        print(f"\n   Teste {i}: '{test_case['text']}'")
        
        # Criar evento de obje√ß√£o
        event = ObjectionEvent(
            call_id=f"test_{i}",
            category=test_case['category'],
            text=test_case['text'],
            context_snippet=test_case['text'],
            timestamp_ms=int(time.time() * 1000)
        )
        
        # Recuperar passagens
        passages = rag_service.retrieve_passages(
            event.text, 
            event.category, 
            top_k=3
        )
        
        print(f"      Categoria esperada: {test_case['expected']}")
        print(f"      Passagens encontradas: {len(passages)}")
        
        for j, passage in enumerate(passages, 1):
            print(f"        [{j}] {passage.title} (score: {passage.score:.2f})")
        
        if len(passages) == 0:
            print("      ‚ö†Ô∏è Nenhuma passagem encontrada")
        else:
            print("      ‚úÖ Passagens recuperadas com sucesso")


def test_llm_generation(rag_service):
    """Testar gera√ß√£o com LLM (se dispon√≠vel)."""
    print("\nüîç Testando gera√ß√£o com LLM...")
    
    if not rag_service.is_available:
        print("   ‚ö†Ô∏è LLM n√£o dispon√≠vel - pulando teste de gera√ß√£o")
        return
    
    # Criar evento de teste
    event = ObjectionEvent(
        call_id="llm_test",
        category="preco",
        text="O pre√ßo est√° muito alto para o nosso or√ßamento",
        context_snippet="O pre√ßo est√° muito alto para o nosso or√ßamento",
        timestamp_ms=int(time.time() * 1000)
    )
    
    print("   Gerando sugest√µes...")
    start_time = time.time()
    
    # Processar obje√ß√£o
    rag_service.process_objection(event)
    
    # Aguardar resultado (simulado)
    time.sleep(2)
    
    elapsed = (time.time() - start_time) * 1000
    print(f"   ‚è±Ô∏è Tempo de processamento: {elapsed:.0f}ms")


def test_fallback_behavior(rag_service):
    """Testar comportamento de fallback."""
    print("\nüîç Testando comportamento de fallback...")
    
    # Simular LLM indispon√≠vel
    original_available = rag_service.is_available
    rag_service.is_available = False
    
    try:
        # Criar evento de teste
        event = ObjectionEvent(
            call_id="fallback_test",
            category="preco",
            text="O pre√ßo est√° alto",
            context_snippet="O pre√ßo est√° alto",
            timestamp_ms=int(time.time() * 1000)
        )
        
        # Processar obje√ß√£o
        rag_service.process_objection(event)
        
        print("   ‚úÖ Fallback funcionando (LLM simulado como indispon√≠vel)")
        
    finally:
        # Restaurar estado original
        rag_service.is_available = original_available


def main():
    """Fun√ß√£o principal de teste."""
    print("üöÄ Teste de Integra√ß√£o AnythingLLM")
    print("=" * 50)
    
    # Teste 1: Conex√£o AnythingLLM
    llm_available = test_anythingllm_connection()
    
    # Teste 2: Servi√ßo RAG
    rag_service = test_rag_service()
    if not rag_service:
        print("\n‚ùå Falha ao inicializar RAG Service")
        return
    
    # Teste 3: Processamento de obje√ß√µes
    test_objection_processing(rag_service)
    
    # Teste 4: Gera√ß√£o com LLM (se dispon√≠vel)
    test_llm_generation(rag_service)
    
    # Teste 5: Fallback
    test_fallback_behavior(rag_service)
    
    print("\n" + "=" * 50)
    print("‚úÖ Teste de integra√ß√£o conclu√≠do!")
    
    if llm_available:
        print("üéâ AnythingLLM est√° funcionando corretamente")
    else:
        print("‚ö†Ô∏è AnythingLLM n√£o est√° dispon√≠vel - usando fallback")
    
    print("\nüìã Pr√≥ximos passos:")
    print("   1. Iniciar AnythingLLM se n√£o estiver rodando")
    print("   2. Executar: python src/main.py")
    print("   3. Testar com obje√ß√µes reais na interface")


if __name__ == "__main__":
    main() 